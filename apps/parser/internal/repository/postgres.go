package repository

import (
	"database/sql"
	"fmt"
	"task/models"
)

type Repo struct {
	db *sql.DB
}

func NewRepository(db *sql.DB) *Repo {
	return &Repo{
		db: db,
	}
}

func (r *Repo) Save(generator *models.AutoGenerated, meta *models.Meta, data []*models.Data, pagination *models.Pagination, links *models.Links) error {

	if err := createTables(r.db); err != nil {
		return err
	}

	lastInsertedId := 0
	linkQuery := `INSERT INTO link (previous, current, next) VALUES ($1, $2, $3) RETURNING ID`
	err := r.db.QueryRow(linkQuery, links.Previous, links.Current, links.Next).Scan(&lastInsertedId)
	if err != nil {
		return err
	}

	paginationQuery := `INSERT INTO pagination (total, pages, page, lim, links_id) VALUES ($1,$2,$3,$4,$5) RETURNING ID`
	err = r.db.QueryRow(paginationQuery, pagination.Total, pagination.Pages, pagination.Page, pagination.Limit, lastInsertedId).Scan(&lastInsertedId)
	if err != nil {
		return err
	}

	metaQuery := `INSERT INTO meta (pagination_id) values ($1) RETURNING ID`
	err = r.db.QueryRow(metaQuery, lastInsertedId).Scan(&lastInsertedId)
	if err != nil {
		return err
	}

	str := ""
	for index, d := range data {
		str += fmt.Sprintf("('%d','%d','%s','%s')", d.ID, d.UserID, d.Title, d.Body)
		if index != len(data)-1 {
			str += ","
		}
	}

	dataQuery := fmt.Sprintf(`INSERT INTO data (post_id,user_id,title,body) VALUES %s`, str)
	_, err = r.db.Exec(dataQuery)
	if err != nil {
		return err
	}
	return nil
}

func createTables(db *sql.DB) error {
	linkQuery := `CREATE TABLE IF NOT EXISTS link(id SERIAL PRIMARY KEY NOT NULL, previous TEXT, current TEXT, next TEXT)`
	if _, err := db.Exec(linkQuery); err != nil {
		return err
	}

	paginationQuery := `CREATE TABLE IF NOT EXISTS pagination(id SERIAL PRIMARY KEY, total INTEGER, pages INTEGER, page INTEGER, lim INTEGER, links_id INTEGER REFERENCES link)`
	if _, err := db.Exec(paginationQuery); err != nil {
		return err
	}

	dataquery := `CREATE TABLE IF NOT EXISTS data(id SERIAL PRIMARY KEY, post_id INTEGER, user_id INTEGER, title TEXT, body TEXT)`
	if _, err := db.Exec(dataquery); err != nil {
		return err
	}
	metaquery := `CREATE TABLE IF NOT EXISTS meta(id SERIAL PRIMARY KEY, pagination_id INTEGER REFERENCES pagination)`
	if _, err := db.Exec(metaquery); err != nil {
		return err
	}
	generatorquery := `CREATE TABLE IF NOT EXISTS generator(
		id SERIAL,
		data INTEGER[],
		meta_id INTEGER REFERENCES meta
		)`
	if _, err := db.Exec(generatorquery); err != nil {
		return err
	}
	return nil
}
