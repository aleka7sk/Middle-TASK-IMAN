package grpc

import (
	"context"
	"encoding/json"
	"google.golang.org/grpc"
	"log"
	"net/http"
	"strconv"
	"sync"
	"task/models"
	"task/parser/internal"
	grpcservice "task/pkg/grpc"
	"time"
)

type GRPCServer struct {
	usecase internal.UseCase
}

func NewGRPCServer(server *grpc.Server, usecase internal.UseCase) {
	grpcServer := &GRPCServer{
		usecase: usecase,
	}
	grpcservice.RegisterCreatorServer(server, grpcServer)
}

func (s *GRPCServer) Parse(ctx context.Context, req *grpcservice.Request) (*grpcservice.Response, error) {
	i := 0
	var wg sync.WaitGroup
	link := req.GetUrl()
	str := "https://gorest.co.in/public/v1/posts?page="
	wg.Add(50)
	for i < 50 {
		go func(currentLink string) {
			body, err := http.Get(currentLink)
			if err != nil {
				log.Printf("Bad http url: %v\n", err)
			}
			generator := models.AutoGenerated{}
			json.NewDecoder(body.Body).Decode(&generator)
			body.Body.Close()
			s.usecase.Save(&generator, &generator.Meta, generator.Data, &generator.Meta.Pagination, &generator.Meta.Pagination.Links)
			wg.Done()
		}(link)
		i++
		link = str + strconv.Itoa(i)
		time.Sleep(150 * time.Millisecond)
	}
	wg.Wait()
	return &grpcservice.Response{Status: "OK!"}, nil
}
